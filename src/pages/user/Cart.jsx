import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../../context/CartContext';
import { 
  ShoppingCartOutlined, 
  DeleteOutlined, 
  PlusOutlined, 
  MinusOutlined,
  ArrowLeftOutlined,
  HeartOutlined,
  HeartFilled
} from '@ant-design/icons';
import { Button, Empty, message, Modal, Input, Divider } from 'antd';
import './cart.css';

const currency = (n) =>
  new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(Number(n || 0));

export default function Cart() {
  const { cartItems, addToCart, removeFromCart, increaseQty, decreaseQty } = useCart();
  const navigate = useNavigate();
  const [couponCode, setCouponCode] = useState('');
  const [appliedCoupon, setAppliedCoupon] = useState(null);

  // T√≠nh to√°n t·ªïng ti·ªÅn
  const subtotal = cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
  const shippingFee = subtotal > 500000 ? 0 : 30000; // Mi·ªÖn ph√≠ ship cho ƒë∆°n > 500k
  const discount = appliedCoupon ? subtotal * 0.1 : 0; // Gi·∫£m 10% n·∫øu c√≥ coupon
  const total = subtotal + shippingFee - discount;

  const handleApplyCoupon = () => {
    if (couponCode.trim()) {
      setAppliedCoupon({ code: couponCode, discount: 0.1 });
      message.success('√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng!');
    }
  };

  const handleRemoveCoupon = () => {
    setAppliedCoupon(null);
    setCouponCode('');
    message.info('ƒê√£ x√≥a m√£ gi·∫£m gi√°');
  };

  const handleCheckout = () => {
    if (cartItems.length === 0) {
      message.warning('Gi·ªè h√†ng ƒëang tr·ªëng!');
      return;
    }
    navigate('/checkout');
  };

  const handleContinueShopping = () => {
    navigate('/products');
  };

  const handleRemoveItem = (itemId) => {
    Modal.confirm({
      title: 'X√°c nh·∫≠n x√≥a',
      content: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè h√†ng?',
      okText: 'X√≥a',
      cancelText: 'H·ªßy',
      onOk: () => {
        removeFromCart(itemId);
        message.success('ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng');
      }
    });
  };

  if (cartItems.length === 0) {
    return (
      <div className="cart-empty">
        <div className="container">
          <div className="cart-empty-content">
            <Empty
              image={<ShoppingCartOutlined style={{ fontSize: 64, color: '#d9d9d9' }} />}
              description="Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng"
            >
              <Button 
                type="primary" 
                size="large"
                onClick={handleContinueShopping}
                icon={<ArrowLeftOutlined />}
              >
                Ti·∫øp t·ª•c mua s·∫Øm
              </Button>
            </Empty>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="cart-page">
      <div className="container">
        <div className="cart-header">
          <h1 className="cart-title">
            <ShoppingCartOutlined /> Gi·ªè h√†ng ({cartItems.length} s·∫£n ph·∫©m)
          </h1>
          <Button 
            type="link" 
            onClick={handleContinueShopping}
            icon={<ArrowLeftOutlined />}
          >
            Ti·∫øp t·ª•c mua s·∫Øm
          </Button>
        </div>

        <div className="cart-content">
          <div className="cart-main">
            {/* Danh s√°ch s·∫£n ph·∫©m */}
            <div className="cart-items">
              {cartItems.map((item) => (
                <div key={item.id} className="cart-item">
                  <div className="cart-item-image">
                    <img src={item.image || '/src/assets/img/sanpham1.jpg'} alt={item.name} />
                  </div>
                  
                  <div className="cart-item-info">
                    <h3 className="cart-item-name">{item.name}</h3>
                    <p className="cart-item-price">‚Ç´{item.price?.toLocaleString()}</p>
                    
                    <div className="cart-item-actions">
                      <div className="quantity-controls">
                        <Button 
                          type="text" 
                          icon={<MinusOutlined />}
                          onClick={() => decreaseQty(item.id)}
                          disabled={item.quantity <= 1}
                        />
                        <span className="quantity">{item.quantity}</span>
                        <Button 
                          type="text" 
                          icon={<PlusOutlined />}
                          onClick={() => increaseQty(item.id)}
                        />
                      </div>
                      
                      <div className="cart-item-total">
                        ‚Ç´{(item.price * item.quantity).toLocaleString()}
                      </div>
                      
                      <Button 
                        type="text" 
                        danger
                        icon={<DeleteOutlined />}
                        onClick={() => handleRemoveItem(item.id)}
                      />
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* M√£ gi·∫£m gi√° */}
            <div className="coupon-section">
              <h3>M√£ gi·∫£m gi√°</h3>
              <div className="coupon-input">
                <Input
                  placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
                  value={couponCode}
                  onChange={(e) => setCouponCode(e.target.value)}
                  onPressEnter={handleApplyCoupon}
                />
                <Button 
                  type="primary"
                  onClick={handleApplyCoupon}
                  disabled={!couponCode.trim()}
                >
                  √Åp d·ª•ng
                </Button>
              </div>
              {appliedCoupon && (
                <div className="applied-coupon">
                  <span>ƒê√£ √°p d·ª•ng: {appliedCoupon.code}</span>
                  <Button type="link" onClick={handleRemoveCoupon}>
                    X√≥a
                  </Button>
                </div>
              )}
            </div>
          </div>

          {/* T√≥m t·∫Øt ƒë∆°n h√†ng */}
          <div className="cart-summary">
            <div className="summary-card">
              <h3>T√≥m t·∫Øt ƒë∆°n h√†ng</h3>
              
              <div className="summary-item">
                <span>T·∫°m t√≠nh:</span>
                <span>‚Ç´{subtotal.toLocaleString()}</span>
              </div>
              
              <div className="summary-item">
                <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                <span>{shippingFee === 0 ? 'Mi·ªÖn ph√≠' : `‚Ç´${shippingFee.toLocaleString()}`}</span>
              </div>
              
              {appliedCoupon && (
                <div className="summary-item discount">
                  <span>Gi·∫£m gi√° ({appliedCoupon.code}):</span>
                  <span>-‚Ç´{discount.toLocaleString()}</span>
                </div>
              )}
              
              <Divider />
              
              <div className="summary-total">
                <span>T·ªïng c·ªông:</span>
                <span className="total-amount">‚Ç´{total.toLocaleString()}</span>
              </div>
              
              {shippingFee > 0 && (
                <div className="free-shipping-note">
                  Mua th√™m ‚Ç´{(500000 - subtotal).toLocaleString()} ƒë·ªÉ ƒë∆∞·ª£c mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn
                </div>
              )}
              
              <Button 
                type="primary" 
                size="large" 
                block
                onClick={handleCheckout}
                className="checkout-btn"
              >
                Ti·∫øn h√†nh thanh to√°n
              </Button>
              
              <div className="secure-checkout">
                <span>üîí Thanh to√°n an to√†n</span>
                <span>‚úì Giao h√†ng mi·ªÖn ph√≠</span>
                <span>‚úì ƒê·ªïi tr·∫£ 30 ng√†y</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
