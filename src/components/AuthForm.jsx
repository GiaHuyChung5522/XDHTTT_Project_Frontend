import React, { useState } from "react";
import "./AuthForm.css";

const AuthForm = ({ onClose, onSwitchMode }) => {
  const [mode, setMode] = useState("login"); // "login", "register", "forgot"
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    confirmPassword: "",
    name: "",
    phone: ""
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
    setError(""); // X√≥a l·ªói khi user g√µ
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    setSuccess("");

    try {
      if (mode === "login") {
        // Logic ƒëƒÉng nh·∫≠p
        const response = await fetch("/api/login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            email: formData.email,
            password: formData.password
          })
        });

        if (response.ok) {
          const data = await response.json();
          localStorage.setItem("token", data.accessToken);
          setSuccess("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
          setTimeout(() => onClose(), 1500);
        } else {
          setError("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
        }
      } else if (mode === "register") {
        // Logic ƒëƒÉng k√Ω
        if (formData.password !== formData.confirmPassword) {
          setError("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
          return;
        }

        const response = await fetch("/api/register", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            name: formData.name,
            email: formData.email,
            password: formData.password,
            phone: formData.phone
          })
        });

        if (response.ok) {
          setSuccess("ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.");
          setTimeout(() => setMode("login"), 1500);
        } else {
          setError("Email ƒë√£ t·ªìn t·∫°i ho·∫∑c c√≥ l·ªói x·∫£y ra!");
        }
      } else if (mode === "forgot") {
        // Logic qu√™n m·∫≠t kh·∫©u
        const response = await fetch("/api/forgot-password", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email: formData.email })
        });

        if (response.ok) {
          setSuccess("ƒê√£ g·ª≠i email kh√¥i ph·ª•c m·∫≠t kh·∫©u!");
          setTimeout(() => setMode("login"), 2000);
        } else {
          setError("Email kh√¥ng t·ªìn t·∫°i ho·∫∑c c√≥ l·ªói x·∫£y ra!");
        }
      }
    } catch (err) {
      setError("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  const switchMode = (newMode) => {
    setMode(newMode);
    setFormData({
      email: "",
      password: "",
      confirmPassword: "",
      name: "",
      phone: ""
    });
    setError("");
    setSuccess("");
  };

  return (
    <div className="auth-overlay">
      <div className="auth-modal">
        {/* Header */}
        <div className="auth-header">
          <h2 className="auth-title">
            {mode === "login" && "ƒêƒÉng Nh·∫≠p"}
            {mode === "register" && "ƒêƒÉng K√Ω"}
            {mode === "forgot" && "Qu√™n M·∫≠t Kh·∫©u"}
          </h2>
          <button className="auth-close" onClick={onClose}>
            ‚úï
          </button>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="auth-form">
          {/* Th√¥ng b√°o th√†nh c√¥ng */}
          {success && (
            <div className="auth-success">
              <span className="success-icon">‚úì</span>
              {success}
            </div>
          )}

          {/* Th√¥ng b√°o l·ªói */}
          {error && (
            <div className="auth-error">
              <span className="error-icon">‚ö†</span>
              {error}
            </div>
          )}

          {/* T√™n (ch·ªâ hi·ªÉn th·ªã khi ƒëƒÉng k√Ω) */}
          {mode === "register" && (
            <div className="form-group">
              <label htmlFor="name">H·ªç v√† t√™n</label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="Nh·∫≠p h·ªç v√† t√™n"
                required
              />
            </div>
          )}

          {/* Email */}
          <div className="form-group">
            <label htmlFor="email">Email</label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p email c·ªßa b·∫°n"
              required
            />
          </div>

          {/* M·∫≠t kh·∫©u (kh√¥ng hi·ªÉn th·ªã khi qu√™n m·∫≠t kh·∫©u) */}
          {mode !== "forgot" && (
            <div className="form-group">
              <label htmlFor="password">M·∫≠t kh·∫©u</label>
              <input
                type="password"
                id="password"
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                required
              />
            </div>
          )}

          {/* X√°c nh·∫≠n m·∫≠t kh·∫©u (ch·ªâ hi·ªÉn th·ªã khi ƒëƒÉng k√Ω) */}
          {mode === "register" && (
            <div className="form-group">
              <label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
              <input
                type="password"
                id="confirmPassword"
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleInputChange}
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                required
              />
            </div>
          )}

          {/* S·ªë ƒëi·ªán tho·∫°i (ch·ªâ hi·ªÉn th·ªã khi ƒëƒÉng k√Ω) */}
          {mode === "register" && (
            <div className="form-group">
              <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                required
              />
            </div>
          )}

          {/* N√∫t submit */}
          <button
            type="submit"
            className="auth-submit"
            disabled={loading}
          >
            {loading ? (
              <span className="loading-spinner"></span>
            ) : (
              <>
                {mode === "login" && "ƒêƒÉng Nh·∫≠p"}
                {mode === "register" && "ƒêƒÉng K√Ω"}
                {mode === "forgot" && "G·ª≠i Email"}
              </>
            )}
          </button>
        </form>

        {/* Footer v·ªõi c√°c link chuy·ªÉn ƒë·ªïi */}
        <div className="auth-footer">
          {mode === "login" && (
            <>
              <p className="auth-switch">
                Ch∆∞a c√≥ t√†i kho·∫£n?{" "}
                <button
                  className="auth-link"
                  onClick={() => switchMode("register")}
                >
                  ƒêƒÉng k√Ω ngay
                </button>
              </p>
              <button
                className="auth-link forgot-link"
                onClick={() => switchMode("forgot")}
              >
                Qu√™n m·∫≠t kh·∫©u?
              </button>
            </>
          )}

          {mode === "register" && (
            <p className="auth-switch">
              ƒê√£ c√≥ t√†i kho·∫£n?{" "}
              <button
                className="auth-link"
                onClick={() => switchMode("login")}
              >
                ƒêƒÉng nh·∫≠p
              </button>
            </p>
          )}

          {mode === "forgot" && (
            <p className="auth-switch">
              Nh·ªõ m·∫≠t kh·∫©u r·ªìi?{" "}
              <button
                className="auth-link"
                onClick={() => switchMode("login")}
              >
                ƒêƒÉng nh·∫≠p
              </button>
            </p>
          )}
        </div>

        {/* Social login */}
        <div className="auth-social">
          <p className="social-divider">Ho·∫∑c</p>
          <div className="social-buttons">
            <button className="social-btn social-google">
              <span className="social-icon">üîç</span>
              Google
            </button>
            <button className="social-btn social-facebook">
              <span className="social-icon">üìò</span>
              Facebook
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AuthForm;